use once_cell::sync::Lazy;
use std::collections::HashMap;

pub static KEYS: Lazy<HashMap<&'static str, u8>> = Lazy::new(|| {
    let mut m = HashMap::new();
    m.insert("Again", 0x79);
    m.insert("AlternateErase", 0x9d);
    m.insert("AltGr", 0xe6);
    m.insert("AltLeft", 0xe2);
    m.insert("AltRight", 0xe6);
    m.insert("Application", 0x65);
    m.insert("ArrowDown", 0x51);
    m.insert("ArrowLeft", 0x50);
    m.insert("ArrowRight", 0x4f);
    m.insert("ArrowUp", 0x52);
    m.insert("Attention", 0x9a);
    m.insert("Backquote", 0x35);
    m.insert("Backslash", 0x31);
    m.insert("Backspace", 0x2a);
    m.insert("BracketLeft", 0x2f);
    m.insert("BracketRight", 0x30);
    m.insert("Cancel", 0x9b);
    m.insert("CapsLock", 0x39);
    m.insert("Clear", 0x9c);
    m.insert("ClearAgain", 0xa2);
    m.insert("Comma", 0x36);
    m.insert("Compose", 0xe3);
    m.insert("ContextMenu", 0x65);
    m.insert("ControlLeft", 0xe0);
    m.insert("ControlRight", 0xe4);
    m.insert("Copy", 0x7c);
    m.insert("CrSel", 0xa3);
    m.insert("CurrencySubunit", 0xb5);
    m.insert("CurrencyUnit", 0xb4);
    m.insert("Cut", 0x7b);
    m.insert("DecimalSeparator", 0xb3);
    m.insert("Delete", 0x4c);
    m.insert("Digit0", 0x27);
    m.insert("Digit1", 0x1e);
    m.insert("Digit2", 0x1f);
    m.insert("Digit3", 0x20);
    m.insert("Digit4", 0x21);
    m.insert("Digit5", 0x22);
    m.insert("Digit6", 0x23);
    m.insert("Digit7", 0x24);
    m.insert("Digit8", 0x25);
    m.insert("Digit9", 0x26);
    m.insert("End", 0x4d);
    m.insert("Enter", 0x28);
    m.insert("Equal", 0x2e);
    m.insert("Escape", 0x29);
    m.insert("Execute", 0x74);
    m.insert("ExSel", 0xa4);
    m.insert("F1", 0x3a);
    m.insert("F2", 0x3b);
    m.insert("F3", 0x3c);
    m.insert("F4", 0x3d);
    m.insert("F5", 0x3e);
    m.insert("F6", 0x3f);
    m.insert("F7", 0x40);
    m.insert("F8", 0x41);
    m.insert("F9", 0x42);
    m.insert("F10", 0x43);
    m.insert("F11", 0x44);
    m.insert("F12", 0x45);
    m.insert("F13", 0x68);
    m.insert("F14", 0x69);
    m.insert("F15", 0x6a);
    m.insert("F16", 0x6b);
    m.insert("F17", 0x6c);
    m.insert("F18", 0x6d);
    m.insert("F19", 0x6e);
    m.insert("F20", 0x6f);
    m.insert("F21", 0x70);
    m.insert("F22", 0x71);
    m.insert("F23", 0x72);
    m.insert("F24", 0x73);
    m.insert("Find", 0x7e);
    m.insert("Grave", 0x35);
    m.insert("HashTilde", 0x32);
    m.insert("Help", 0x75);
    m.insert("Home", 0x4a);
    m.insert("Insert", 0x49);
    m.insert("International7", 0x8d);
    m.insert("International8", 0x8e);
    m.insert("International9", 0x8f);
    m.insert("IntlBackslash", 0x64);
    m.insert("KeyA", 0x04);
    m.insert("KeyB", 0x05);
    m.insert("KeyC", 0x06);
    m.insert("KeyD", 0x07);
    m.insert("KeyE", 0x08);
    m.insert("KeyF", 0x09);
    m.insert("KeyG", 0x0a);
    m.insert("KeyH", 0x0b);
    m.insert("KeyI", 0x0c);
    m.insert("KeyJ", 0x0d);
    m.insert("KeyK", 0x0e);
    m.insert("KeyL", 0x0f);
    m.insert("KeyM", 0x10);
    m.insert("KeyN", 0x11);
    m.insert("KeyO", 0x12);
    m.insert("KeyP", 0x13);
    m.insert("KeyQ", 0x14);
    m.insert("KeyR", 0x15);
    m.insert("KeyS", 0x16);
    m.insert("KeyT", 0x17);
    m.insert("KeyU", 0x18);
    m.insert("KeyV", 0x19);
    m.insert("KeyW", 0x1a);
    m.insert("KeyX", 0x1b);
    m.insert("KeyY", 0x1c);
    m.insert("KeyZ", 0x1d);
    m.insert("KeyRO", 0x87);
    m.insert("KatakanaHiragana", 0x88);
    m.insert("Yen", 0x89);
    m.insert("Henkan", 0x8a);
    m.insert("Muhenkan", 0x8b);
    m.insert("KPJPComma", 0x8c);
    m.insert("Hangeul", 0x90);
    m.insert("Hanja", 0x91);
    m.insert("Katakana", 0x92);
    m.insert("Hiragana", 0x93);
    m.insert("ZenkakuHankaku", 0x94);
    m.insert("LockingCapsLock", 0x82);
    m.insert("LockingNumLock", 0x83);
    m.insert("LockingScrollLock", 0x84);
    m.insert("Lang6", 0x95);
    m.insert("Lang7", 0x96);
    m.insert("Lang8", 0x97);
    m.insert("Lang9", 0x98);
    m.insert("Menu", 0x76);
    m.insert("MetaLeft", 0xe3);
    m.insert("MetaRight", 0xe7);
    m.insert("Minus", 0x2d);
    m.insert("Mute", 0x7f);
    m.insert("NumLock", 0x53);
    m.insert("Numpad0", 0x62);
    m.insert("Numpad00", 0xb0);
    m.insert("Numpad000", 0xb1);
    m.insert("Numpad1", 0x59);
    m.insert("Numpad2", 0x5a);
    m.insert("Numpad3", 0x5b);
    m.insert("Numpad4", 0x5c);
    m.insert("Numpad5", 0x5d);
    m.insert("Numpad6", 0x5e);
    m.insert("Numpad7", 0x5f);
    m.insert("Numpad8", 0x60);
    m.insert("Numpad9", 0x61);
    m.insert("NumpadAdd", 0x57);
    m.insert("NumpadAnd", 0xc7);
    m.insert("NumpadAt", 0xce);
    m.insert("NumpadBackspace", 0xbb);
    m.insert("NumpadBinary", 0xda);
    m.insert("NumpadCircumflex", 0xc3);
    m.insert("NumpadClear", 0xd8);
    m.insert("NumpadClearEntry", 0xd9);
    m.insert("NumpadColon", 0xcb);
    m.insert("NumpadComma", 0x85);
    m.insert("NumpadDecimal", 0x63);
    m.insert("NumpadDecimalBase", 0xdc);
    m.insert("NumpadDelete", 0x63);
    m.insert("NumpadDivide", 0x54);
    m.insert("NumpadDownArrow", 0x5a);
    m.insert("NumpadEnd", 0x59);
    m.insert("NumpadEnter", 0x58);
    m.insert("NumpadEqual", 0x67);
    m.insert("NumpadExclamation", 0xcf);
    m.insert("NumpadGreaterThan", 0xc6);
    m.insert("NumpadHexadecimal", 0xdd);
    m.insert("NumpadHome", 0x5f);
    m.insert("NumpadKeyA", 0xbc);
    m.insert("NumpadKeyB", 0xbd);
    m.insert("NumpadKeyC", 0xbe);
    m.insert("NumpadKeyD", 0xbf);
    m.insert("NumpadKeyE", 0xc0);
    m.insert("NumpadKeyF", 0xc1);
    m.insert("NumpadLeftArrow", 0x5c);
    m.insert("NumpadLeftBrace", 0xb8);
    m.insert("NumpadLeftParen", 0xb6);
    m.insert("NumpadLessThan", 0xc5);
    m.insert("NumpadLogicalAnd", 0xc8);
    m.insert("NumpadLogicalOr", 0xca);
    m.insert("NumpadMemoryAdd", 0xd3);
    m.insert("NumpadMemoryClear", 0xd2);
    m.insert("NumpadMemoryDivide", 0xd6);
    m.insert("NumpadMemoryMultiply", 0xd5);
    m.insert("NumpadMemoryRecall", 0xd1);
    m.insert("NumpadMemoryStore", 0xd0);
    m.insert("NumpadMemorySubtract", 0xd4);
    m.insert("NumpadMultiply", 0x55);
    m.insert("NumpadOctal", 0xdb);
    m.insert("NumpadOctathorpe", 0xcc);
    m.insert("NumpadOr", 0xc9);
    m.insert("NumpadPageDown", 0x5b);
    m.insert("NumpadPageUp", 0x61);
    m.insert("NumpadPercent", 0xc4);
    m.insert("NumpadPlusMinus", 0xd7);
    m.insert("NumpadRightArrow", 0x5e);
    m.insert("NumpadRightBrace", 0xb9);
    m.insert("NumpadRightParen", 0xb7);
    m.insert("NumpadSpace", 0xcd);
    m.insert("NumpadSubtract", 0x56);
    m.insert("NumpadTab", 0xba);
    m.insert("NumpadUpArrow", 0x60);
    m.insert("NumpadXOR", 0xc2);
    m.insert("Octothorpe", 0x32);
    m.insert("Operation", 0xa1);
    m.insert("Out", 0xa0);
    m.insert("PageDown", 0x4e);
    m.insert("PageUp", 0x4b);
    m.insert("Paste", 0x7d);
    m.insert("Pause", 0x48);
    m.insert("Period", 0x37);
    m.insert("Power", 0x66);
    m.insert("PrintScreen", 0x46);
    m.insert("Prior", 0x9d);
    m.insert("Quote", 0x34);
    m.insert("Return", 0x9e);
    m.insert("ScrollLock", 0x47);
    m.insert("Select", 0x77);
    m.insert("Semicolon", 0x33);
    m.insert("Separator", 0x9f);
    m.insert("ShiftLeft", 0xe1);
    m.insert("ShiftRight", 0xe5);
    m.insert("Slash", 0x38);
    m.insert("Space", 0x2c);
    m.insert("Stop", 0x78);
    m.insert("SystemRequest", 0x9a);
    m.insert("Tab", 0x2b);
    m.insert("ThousandsSeparator", 0xb2);
    m.insert("Tilde", 0x35);
    m.insert("Undo", 0x7a);
    m.insert("VolumeDown", 0x81);
    m.insert("VolumeUp", 0x80);
    m
});

pub static MODIFIERS: Lazy<HashMap<&'static str, u8>> = Lazy::new(|| {
    let mut m = HashMap::new();
    m.insert("ControlLeft", 0x01);
    m.insert("ControlRight", 0x10);
    m.insert("ShiftLeft", 0x02);
    m.insert("ShiftRight", 0x20);
    m.insert("AltLeft", 0x04);
    m.insert("AltRight", 0x40);
    m.insert("MetaLeft", 0x08);
    m.insert("MetaRight", 0x80);
    m.insert("AltGr", 0x40);
    m
});

pub static HID_KEY_TO_MODIFIER_MASK: Lazy<HashMap<u8, u8>> = Lazy::new(|| {
    let mut m = HashMap::new();
    m.insert(0xe0, 0x01);
    m.insert(0xe1, 0x02);
    m.insert(0xe2, 0x04);
    m.insert(0xe3, 0x08);
    m.insert(0xe4, 0x10);
    m.insert(0xe5, 0x20);
    m.insert(0xe6, 0x40);
    m.insert(0xe7, 0x80);
    m
});

pub fn key_name_to_hid(key_name: &str) -> Option<u8> {
    KEYS.get(key_name).copied()
}

pub fn modifier_name_to_mask(modifier_name: &str) -> Option<u8> {
    MODIFIERS.get(modifier_name).copied()
}
